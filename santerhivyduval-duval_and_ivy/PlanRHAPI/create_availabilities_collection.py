#!/usr/bin/env python3
"""
Script pour cr√©er la collection "availabilities" dans MongoDB
Ce script doit √™tre ex√©cut√© une seule fois pour initialiser la collection des disponibilit√©s
"""

from pymongo import MongoClient
from datetime import datetime, date, timedelta
import os

# Configuration de la base de donn√©es
MONGO_URI = os.getenv('MONGO_URI', 'mongodb://localhost:27017/')
DATABASE_NAME = os.getenv('DATABASE_NAME', 'planRhIA')

def create_availabilities_collection():
    """Cr√©e la collection availabilities avec des donn√©es d'exemple"""
    
    # Connexion √† MongoDB
    client = MongoClient(MONGO_URI)
    db = client[DATABASE_NAME]
    
    print(f"Connexion √† la base de donn√©es {DATABASE_NAME}...")
    
    # Cr√©er la collection availabilities
    availabilities_collection = db['availabilities']
    if availabilities_collection.count_documents({}) == 0:
        print("Cr√©ation de la collection 'availabilities'...")
        
        # G√©n√©rer des disponibilit√©s d'exemple pour les prochains jours
        sample_availabilities = []
        today = date.today()
        
        # Disponibilit√©s d'exemple pour diff√©rents utilisateurs
        user_ids = ["684314eb3bd4c4c00ce9c019", "684314eb3bd4c4c00ce9c020", "684314eb3bd4c4c00ce9c021"]
        
        for i in range(7):  # 7 jours de disponibilit√©s
            current_date = today + timedelta(days=i)
            date_str = current_date.strftime("%Y-%m-%d")
            
            for j, user_id in enumerate(user_ids):
                # Cr√©er des cr√©neaux diff√©rents pour chaque utilisateur
                if j == 0:  # Premier utilisateur - matin
                    start_time = "08:00"
                    end_time = "12:00"
                    status = "propos√©"
                elif j == 1:  # Deuxi√®me utilisateur - apr√®s-midi
                    start_time = "13:00"
                    end_time = "17:00"
                    status = "valid√©"
                else:  # Troisi√®me utilisateur - soir
                    start_time = "18:00"
                    end_time = "22:00"
                    status = "propos√©"
                
                availability = {
                    "user_id": user_id,
                    "date": date_str,
                    "start_time": start_time,
                    "end_time": end_time,
                    "status": status,
                    "commentaire": f"Disponibilit√© {status} pour le {date_str}",
                    "created_at": datetime.now(),
                    "updated_at": datetime.now()
                }
                sample_availabilities.append(availability)
        
        availabilities_collection.insert_many(sample_availabilities)
        print(f"‚úì Collection 'availabilities' cr√©√©e avec {len(sample_availabilities)} disponibilit√©s d'exemple")
    else:
        print("‚úì Collection 'availabilities' existe d√©j√†")
    
    # Cr√©er les index pour am√©liorer les performances
    print("Cr√©ation des index pour la collection availabilities...")
    
    # Index pour les requ√™tes fr√©quentes
    availabilities_collection.create_index("user_id")
    availabilities_collection.create_index("date")
    availabilities_collection.create_index("status")
    availabilities_collection.create_index("created_at")
    
    # Index compos√© pour les requ√™tes complexes
    availabilities_collection.create_index([("user_id", 1), ("date", 1)])
    availabilities_collection.create_index([("date", 1), ("status", 1)])
    availabilities_collection.create_index([("user_id", 1), ("status", 1)])
    
    print("‚úì Index cr√©√©s avec succ√®s")
    
    # Afficher quelques statistiques
    total_count = availabilities_collection.count_documents({})
    proposed_count = availabilities_collection.count_documents({"status": "propos√©"})
    validated_count = availabilities_collection.count_documents({"status": "valid√©"})
    refused_count = availabilities_collection.count_documents({"status": "refus√©"})
    
    print(f"\nüìä Statistiques de la collection availabilities:")
    print(f"   Total: {total_count}")
    print(f"   Propos√©es: {proposed_count}")
    print(f"   Valid√©es: {validated_count}")
    print(f"   Refus√©es: {refused_count}")
    
    client.close()
    print("\nüéâ Initialisation de la collection availabilities termin√©e !")

if __name__ == "__main__":
    try:
        create_availabilities_collection()
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation : {e}")
        print("V√©rifiez que MongoDB est d√©marr√© et accessible.")








