#!/usr/bin/env python3
"""
Script pour cr√©er la collection "plannings" dans MongoDB
Ce script doit √™tre ex√©cut√© une seule fois pour initialiser la collection des plannings valid√©s
"""

from pymongo import MongoClient
from datetime import datetime, date, timedelta
import os

# Configuration de la base de donn√©es
MONGO_URI = os.getenv('MONGO_URI', 'mongodb://localhost:27017/')
DATABASE_NAME = os.getenv('DATABASE_NAME', 'planRhIA')

def create_plannings_collection():
    """Cr√©e la collection plannings avec des donn√©es d'exemple"""
    
    # Connexion √† MongoDB
    client = MongoClient(MONGO_URI)
    db = client[DATABASE_NAME]
    
    print(f"Connexion √† la base de donn√©es {DATABASE_NAME}...")
    
    # Cr√©er la collection plannings
    plannings_collection = db['plannings']
    if plannings_collection.count_documents({}) == 0:
        print("Cr√©ation de la collection 'plannings'...")
        
        # G√©n√©rer des plannings d'exemple pour les prochains jours
        sample_plannings = []
        today = date.today()
        
        # Plannings d'exemple pour diff√©rents utilisateurs
        user_ids = ["684314eb3bd4c4c00ce9c019", "684314eb3bd4c4c00ce9c020", "684314eb3bd4c4c00ce9c021"]
        
        # Codes d'activit√© disponibles
        activity_codes = ["SOIN", "CONG√â", "REPOS", "FORMATION", "ADMINISTRATIF"]
        
        # Plages horaires typiques
        time_slots = [
            ("08:00-12:00", "Matin"),
            ("13:00-17:00", "Apr√®s-midi"),
            ("18:00-22:00", "Soir"),
            ("08:00-17:00", "Journ√©e compl√®te"),
            ("20:00-08:00", "Nuit")
        ]
        
        for i in range(14):  # 14 jours de plannings
            current_date = today + timedelta(days=i)
            date_str = current_date.strftime("%Y-%m-%d")
            
            for j, user_id in enumerate(user_ids):
                # Cr√©er des plannings diff√©rents pour chaque utilisateur
                if j == 0:  # Premier utilisateur - Soins
                    activity_code = "SOIN"
                    plage_horaire, description = time_slots[0]  # Matin
                elif j == 1:  # Deuxi√®me utilisateur - Formation
                    activity_code = "FORMATION"
                    plage_horaire, description = time_slots[1]  # Apr√®s-midi
                else:  # Troisi√®me utilisateur - Repos
                    activity_code = "REPOS"
                    plage_horaire, description = time_slots[2]  # Soir
                
                # Ajouter quelques variations
                if i % 3 == 0 and j == 0:  # Cong√© pour le premier utilisateur
                    activity_code = "CONG√â"
                    plage_horaire, description = time_slots[3]  # Journ√©e compl√®te
                elif i % 5 == 0 and j == 1:  # Administratif pour le deuxi√®me utilisateur
                    activity_code = "ADMINISTRATIF"
                    plage_horaire, description = time_slots[0]  # Matin
                
                planning = {
                    "user_id": user_id,
                    "date": date_str,
                    "activity_code": activity_code,
                    "plage_horaire": plage_horaire,
                    "created_at": datetime.now(),
                    "updated_at": datetime.now(),
                    "validated_by": "684314eb3bd4c4c00ce9c022",  # ID d'un cadre
                    "commentaire": f"Planning {activity_code} - {description} pour le {date_str}"
                }
                sample_plannings.append(planning)
        
        plannings_collection.insert_many(sample_plannings)
        print(f"‚úì Collection 'plannings' cr√©√©e avec {len(sample_plannings)} plannings d'exemple")
    else:
        print("‚úì Collection 'plannings' existe d√©j√†")
    
    # Cr√©er les index pour am√©liorer les performances
    print("Cr√©ation des index pour la collection plannings...")
    
    # Index pour les requ√™tes fr√©quentes
    plannings_collection.create_index("user_id")
    plannings_collection.create_index("date")
    plannings_collection.create_index("activity_code")
    plannings_collection.create_index("plage_horaire")
    plannings_collection.create_index("created_at")
    plannings_collection.create_index("validated_by")
    
    # Index compos√© pour les requ√™tes complexes
    plannings_collection.create_index([("user_id", 1), ("date", 1)])
    plannings_collection.create_index([("date", 1), ("activity_code", 1)])
    plannings_collection.create_index([("user_id", 1), ("activity_code", 1)])
    plannings_collection.create_index([("date", 1), ("plage_horaire", 1)])
    
    print("‚úì Index cr√©√©s avec succ√®s")
    
    # Afficher quelques statistiques
    total_count = plannings_collection.count_documents({})
    
    # Statistiques par code d'activit√©
    activity_stats = {}
    activities = ["SOIN", "CONG√â", "REPOS", "FORMATION", "ADMINISTRATIF"]
    
    for activity in activities:
        count = plannings_collection.count_documents({"activity_code": activity})
        activity_stats[activity] = count
    
    # Statistiques par utilisateur
    user_stats = {}
    for user_id in user_ids:
        count = plannings_collection.count_documents({"user_id": user_id})
        user_stats[user_id] = count
    
    print(f"\nüìä Statistiques de la collection plannings:")
    print(f"   Total: {total_count}")
    print(f"   Par activit√©:")
    for activity, count in activity_stats.items():
        print(f"     {activity}: {count}")
    print(f"   Par utilisateur:")
    for user_id, count in user_stats.items():
        print(f"     {user_id}: {count}")
    
    client.close()
    print("\nüéâ Initialisation de la collection plannings termin√©e !")

if __name__ == "__main__":
    try:
        create_plannings_collection()
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation : {e}")
        print("V√©rifiez que MongoDB est d√©marr√© et accessible.")





