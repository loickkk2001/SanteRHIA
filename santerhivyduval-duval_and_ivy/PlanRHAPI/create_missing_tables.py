#!/usr/bin/env python3
"""
Script pour cr√©er les tables manquantes (alerts, anomalies, events) dans MongoDB
Ce script doit √™tre ex√©cut√© une seule fois pour initialiser les collections n√©cessaires
"""

from pymongo import MongoClient
from datetime import datetime
import os

# Configuration de la base de donn√©es
MONGO_URI = os.getenv('MONGO_URI', 'mongodb://localhost:27017/')
DATABASE_NAME = os.getenv('DATABASE_NAME', 'planRhIA')

def create_collections():
    """Cr√©e les collections manquantes avec des donn√©es d'exemple"""
    
    # Connexion √† MongoDB
    client = MongoClient(MONGO_URI)
    db = client[DATABASE_NAME]
    
    print(f"Connexion √† la base de donn√©es {DATABASE_NAME}...")
    
    # Cr√©er la collection alerts
    alerts_collection = db['alerts']
    if alerts_collection.count_documents({}) == 0:
        print("Cr√©ation de la collection 'alerts'...")
        sample_alerts = [
            {
                "title": "Bienvenue dans SAPHIR",
                "message": "Syst√®me de gestion des plannings et ressources humaines op√©rationnel.",
                "type": "info",
                "priority": "low",
                "is_read": False,
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat()
            }
        ]
        alerts_collection.insert_many(sample_alerts)
        print(f"‚úì Collection 'alerts' cr√©√©e avec {len(sample_alerts)} alertes d'exemple")
    else:
        print("‚úì Collection 'alerts' existe d√©j√†")
    
    # Cr√©er la collection anomalies
    anomalies_collection = db['anomalies']
    if anomalies_collection.count_documents({}) == 0:
        print("Cr√©ation de la collection 'anomalies'...")
        sample_anomalies = [
            {
                "title": "Aucune anomalie d√©tect√©e",
                "description": "Le syst√®me fonctionne normalement.",
                "type": "system",
                "severity": "low",
                "status": "resolved",
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat()
            }
        ]
        anomalies_collection.insert_many(sample_anomalies)
        print(f"‚úì Collection 'anomalies' cr√©√©e avec {len(sample_anomalies)} anomalies d'exemple")
    else:
        print("‚úì Collection 'anomalies' existe d√©j√†")
    
    # Cr√©er la collection events
    events_collection = db['events']
    if events_collection.count_documents({}) == 0:
        print("Cr√©ation de la collection 'events'...")
        sample_events = [
            {
                "title": "Formation SAPHIR",
                "description": "Formation √† l'utilisation du syst√®me SAPHIR pour le personnel.",
                "type": "training",
                "status": "pending",
                "due_date": (datetime.now().replace(day=datetime.now().day + 7)).isoformat(),
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat()
            },
            {
                "title": "R√©union mensuelle RH",
                "description": "R√©union mensuelle avec l'√©quipe des ressources humaines.",
                "type": "meeting",
                "status": "pending",
                "due_date": (datetime.now().replace(day=datetime.now().day + 14)).isoformat(),
                "created_at": datetime.now().isoformat(),
                "updated_at": datetime.now().isoformat()
            }
        ]
        events_collection.insert_many(sample_events)
        print(f"‚úì Collection 'events' cr√©√©e avec {len(sample_events)} √©v√©nements d'exemple")
    else:
        print("‚úì Collection 'events' existe d√©j√†")
    
    # Cr√©er la collection notifications
    notifications_collection = db['notifications']
    if notifications_collection.count_documents({}) == 0:
        print("Cr√©ation de la collection 'notifications'...")
        sample_notifications = [
            {
                "title": "Nouvelle alerte d√©tect√©e",
                "message": "Une anomalie de planning a √©t√© d√©tect√©e dans votre service",
                "type": "warning",
                "priority": "high",
                "category": "alert",
                "user_id": "684314eb3bd4c4c00ce9c019",
                "read": False,
                "created_at": datetime.now().isoformat(),
                "action_url": "/sec/alerts",
                "action_label": "Voir les alertes"
            },
            {
                "title": "Alerte critique",
                "message": "Sous-effectif critique d√©tect√© - Action imm√©diate requise",
                "type": "error",
                "priority": "critical",
                "category": "anomaly",
                "user_id": "684314eb3bd4c4c00ce9c019",
                "read": False,
                "created_at": datetime.now().isoformat(),
                "action_url": "/cadre/anomalies",
                "action_label": "G√©rer les anomalies"
            },
            {
                "title": "√âv√©nement √† venir",
                "message": "Formation s√©curit√© pr√©vue demain √† 9h",
                "type": "info",
                "priority": "medium",
                "category": "event",
                "user_id": "684314eb3bd4c4c00ce9c019",
                "read": True,
                "created_at": datetime.now().isoformat(),
                "action_url": "/sec/calendar",
                "action_label": "Voir le calendrier"
            }
        ]
        notifications_collection.insert_many(sample_notifications)
        print(f"‚úì Collection 'notifications' cr√©√©e avec {len(sample_notifications)} notifications d'exemple")
    else:
        print("‚úì Collection 'notifications' existe d√©j√†")
    
    # Cr√©er les index pour am√©liorer les performances
    print("Cr√©ation des index...")
    
    # Index pour alerts
    alerts_collection.create_index("user_id")
    alerts_collection.create_index("service_id")
    alerts_collection.create_index("is_read")
    alerts_collection.create_index("created_at")
    
    # Index pour anomalies
    anomalies_collection.create_index("user_id")
    anomalies_collection.create_index("service_id")
    anomalies_collection.create_index("type")
    anomalies_collection.create_index("status")
    anomalies_collection.create_index("created_at")
    
    # Index pour events
    events_collection.create_index("user_id")
    events_collection.create_index("service_id")
    events_collection.create_index("type")
    events_collection.create_index("status")
    events_collection.create_index("due_date")
    events_collection.create_index("created_at")
    
    # Index pour notifications
    notifications_collection.create_index("user_id")
    notifications_collection.create_index("read")
    notifications_collection.create_index("created_at")
    notifications_collection.create_index([("user_id", 1), ("read", 1)])
    
    print("‚úì Index cr√©√©s avec succ√®s")
    
    client.close()
    print("\nüéâ Initialisation termin√©e ! Les pages d'accueil devraient maintenant fonctionner correctement.")

if __name__ == "__main__":
    try:
        create_collections()
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation : {e}")
        print("V√©rifiez que MongoDB est d√©marr√© et accessible.")
