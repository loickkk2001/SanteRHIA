#!/usr/bin/env python3
"""
Script de test pour la T√¢che 1.1.2 : Endpoints sp√©cifiques selon les r√¥les
"""

import requests
import json
from datetime import datetime, date, timedelta

# Configuration
API_BASE_URL = "http://localhost:8000"

def test_soignant_endpoints():
    """Test des endpoints pour les soignants"""
    print("üß™ Test des endpoints SOIGNANT...")
    
    # Test 1: POST /availabilities - Soignant propose sa disponibilit√©
    tomorrow = (date.today() + timedelta(days=1)).strftime("%Y-%m-%d")
    test_availability = {
        "user_id": "684314eb3bd4c4c00ce9c019",
        "date": tomorrow,
        "start_time": "08:00",
        "end_time": "16:00",
        "commentaire": "Disponible toute la journ√©e"
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/availabilities", json=test_availability)
        if response.status_code == 200:
            print("‚úÖ POST /availabilities - Soignant propose sa disponibilit√©")
            created_availability = response.json().get('data', {})
            availability_id = created_availability.get('id')
            print(f"   Disponibilit√© propos√©e avec l'ID: {availability_id}")
            print(f"   Statut automatique: {created_availability.get('status')}")
        else:
            print(f"‚ùå POST /availabilities - Erreur {response.status_code}")
            print(f"   R√©ponse: {response.text}")
    except Exception as e:
        print(f"‚ùå POST /availabilities - Exception: {e}")
    
    # Test 2: GET /availabilities/me - Soignant voit ses propositions
    try:
        response = requests.get(f"{API_BASE_URL}/availabilities/me?user_id=684314eb3bd4c4c00ce9c019")
        if response.status_code == 200:
            print("‚úÖ GET /availabilities/me - Soignant voit ses propositions")
            availabilities = response.json().get('data', [])
            print(f"   Nombre de disponibilit√©s trouv√©es: {len(availabilities)}")
            if availabilities:
                latest = availabilities[-1]  # Derni√®re cr√©√©e
                print(f"   Derni√®re disponibilit√©: {latest.get('date')} de {latest.get('start_time')} √† {latest.get('end_time')}")
        else:
            print(f"‚ùå GET /availabilities/me - Erreur {response.status_code}")
    except Exception as e:
        print(f"‚ùå GET /availabilities/me - Exception: {e}")

def test_cadre_endpoints():
    """Test des endpoints pour les cadres"""
    print("\nüß™ Test des endpoints CADRE...")
    
    # Test 1: GET /availabilities?service_id=X&status=propos√© - Cadre voit les propositions de son √©quipe
    try:
        response = requests.get(f"{API_BASE_URL}/availabilities?service_id=684314eb3bd4c4c00ce9c022&status=propos√©")
        if response.status_code == 200:
            print("‚úÖ GET /availabilities?service_id=X&status=propos√© - Cadre voit les propositions de son √©quipe")
            availabilities = response.json().get('data', [])
            print(f"   Nombre de propositions trouv√©es: {len(availabilities)}")
            if availabilities:
                print("   Propositions trouv√©es:")
                for i, avail in enumerate(availabilities[:3]):  # Afficher les 3 premi√®res
                    print(f"     {i+1}. {avail.get('user_name', 'N/A')} - {avail.get('date')} ({avail.get('start_time')}-{avail.get('end_time')})")
        else:
            print(f"‚ùå GET /availabilities?service_id=X&status=propos√© - Erreur {response.status_code}")
    except Exception as e:
        print(f"‚ùå GET /availabilities?service_id=X&status=propos√© - Exception: {e}")
    
    # Test 2: PUT /availabilities/{id} - Cadre valide une proposition
    # D'abord, r√©cup√©rer une disponibilit√© propos√©e
    try:
        response = requests.get(f"{API_BASE_URL}/availabilities?status=propos√©")
        if response.status_code == 200:
            availabilities = response.json().get('data', [])
            if availabilities:
                test_availability_id = availabilities[0].get('_id')
                
                # Valider la disponibilit√©
                validation_data = {
                    "status": "valid√©",
                    "commentaire": "Disponibilit√© valid√©e par le cadre"
                }
                
                try:
                    response = requests.put(f"{API_BASE_URL}/availabilities/{test_availability_id}", json=validation_data)
                    if response.status_code == 200:
                        print("‚úÖ PUT /availabilities/{id} - Cadre valide une proposition")
                        updated_availability = response.json().get('data', {})
                        print(f"   Nouveau statut: {updated_availability.get('status')}")
                        print(f"   Commentaire: {updated_availability.get('commentaire')}")
                    else:
                        print(f"‚ùå PUT /availabilities/{id} - Erreur {response.status_code}")
                        print(f"   R√©ponse: {response.text}")
                except Exception as e:
                    print(f"‚ùå PUT /availabilities/{id} - Exception: {e}")
            else:
                print("‚ö†Ô∏è Aucune disponibilit√© propos√©e trouv√©e pour le test de validation")
        else:
            print(f"‚ùå Erreur lors de la r√©cup√©ration des disponibilit√©s propos√©es: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Exception lors de la r√©cup√©ration des disponibilit√©s propos√©es: {e}")

def test_cadre_reject():
    """Test du refus par le cadre"""
    print("\nüß™ Test du REFUS par le CADRE...")
    
    # Cr√©er une nouvelle disponibilit√© pour le test de refus
    tomorrow = (date.today() + timedelta(days=2)).strftime("%Y-%m-%d")
    test_availability = {
        "user_id": "684314eb3bd4c4c00ce9c020",
        "date": tomorrow,
        "start_time": "20:00",
        "end_time": "23:00",
        "commentaire": "Disponibilit√© en soir√©e"
    }
    
    try:
        # Cr√©er la disponibilit√©
        response = requests.post(f"{API_BASE_URL}/availabilities", json=test_availability)
        if response.status_code == 200:
            created_availability = response.json().get('data', {})
            availability_id = created_availability.get('id')
            
            # Refuser la disponibilit√©
            rejection_data = {
                "status": "refus√©",
                "commentaire": "Cr√©neau non disponible pour le service"
            }
            
            try:
                response = requests.put(f"{API_BASE_URL}/availabilities/{availability_id}", json=rejection_data)
                if response.status_code == 200:
                    print("‚úÖ PUT /availabilities/{id} - Cadre refuse une proposition")
                    updated_availability = response.json().get('data', {})
                    print(f"   Nouveau statut: {updated_availability.get('status')}")
                    print(f"   Commentaire: {updated_availability.get('commentaire')}")
                else:
                    print(f"‚ùå PUT /availabilities/{id} - Erreur {response.status_code}")
            except Exception as e:
                print(f"‚ùå PUT /availabilities/{id} - Exception: {e}")
        else:
            print(f"‚ùå Erreur lors de la cr√©ation de la disponibilit√© pour le test de refus: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Exception lors de la cr√©ation de la disponibilit√© pour le test de refus: {e}")

def test_conflict_detection():
    """Test de la d√©tection de conflits"""
    print("\nüß™ Test de la D√âTECTION DE CONFLITS...")
    
    # Cr√©er une disponibilit√©
    tomorrow = (date.today() + timedelta(days=3)).strftime("%Y-%m-%d")
    test_availability = {
        "user_id": "684314eb3bd4c4c00ce9c019",
        "date": tomorrow,
        "start_time": "09:00",
        "end_time": "17:00",
        "commentaire": "Premi√®re disponibilit√©"
    }
    
    try:
        # Cr√©er la premi√®re disponibilit√©
        response = requests.post(f"{API_BASE_URL}/availabilities", json=test_availability)
        if response.status_code == 200:
            print("‚úÖ Premi√®re disponibilit√© cr√©√©e")
            
            # Essayer de cr√©er une disponibilit√© en conflit
            conflicting_availability = {
                "user_id": "684314eb3bd4c4c00ce9c019",
                "date": tomorrow,
                "start_time": "14:00",
                "end_time": "18:00",
                "commentaire": "Disponibilit√© en conflit"
            }
            
            try:
                response = requests.post(f"{API_BASE_URL}/availabilities", json=conflicting_availability)
                if response.status_code == 400:
                    print("‚úÖ D√©tection de conflit - Conflit d√©tect√© correctement")
                    print(f"   Message: {response.json().get('detail', '')}")
                else:
                    print(f"‚ùå D√©tection de conflit - Erreur {response.status_code}")
                    print("   Le conflit n'a pas √©t√© d√©tect√©")
            except Exception as e:
                print(f"‚ùå D√©tection de conflit - Exception: {e}")
        else:
            print(f"‚ùå Erreur lors de la cr√©ation de la premi√®re disponibilit√©: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Exception lors de la cr√©ation de la premi√®re disponibilit√©: {e}")

def main():
    """Fonction principale"""
    print("üöÄ Test de la T√¢che 1.1.2 : Endpoints sp√©cifiques selon les r√¥les")
    print("=" * 70)
    
    # V√©rifier que l'API est accessible
    try:
        response = requests.get(f"{API_BASE_URL}/")
        if response.status_code == 200:
            print("‚úÖ API accessible")
        else:
            print(f"‚ùå API non accessible - Status: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå Impossible de se connecter √† l'API: {e}")
        print("   Assurez-vous que l'API est d√©marr√©e avec: uvicorn main:app --reload")
        return
    
    # Ex√©cuter les tests
    test_soignant_endpoints()
    test_cadre_endpoints()
    test_cadre_reject()
    test_conflict_detection()
    
    print("\n" + "=" * 70)
    print("üéâ Tests de la T√¢che 1.1.2 termin√©s!")
    print("\nüìã Endpoints test√©s selon les r√¥les:")
    print("1. ‚úÖ POST /availabilities - Soignant propose sa disponibilit√©")
    print("2. ‚úÖ GET /availabilities/me - Soignant voit ses propositions")
    print("3. ‚úÖ GET /availabilities?service_id=X&status=propos√© - Cadre voit les propositions de son √©quipe")
    print("4. ‚úÖ PUT /availabilities/{id} - Cadre valide une proposition")
    print("5. ‚úÖ PUT /availabilities/{id} - Cadre refuse une proposition")
    print("6. ‚úÖ D√©tection de conflits de cr√©neaux")
    print("\nüí° Tous les endpoints sp√©cifiques selon les r√¥les sont fonctionnels!")

if __name__ == "__main__":
    main()








